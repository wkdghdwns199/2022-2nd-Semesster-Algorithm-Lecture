package assignment;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.StringTokenizer;

class StartComparator implements Comparator<ArrayList<Integer>>{
	@Override
	public int compare(ArrayList<Integer> arr1, ArrayList<Integer> arr2) {
		if ( arr1.get(0) < arr2.get(0) ) return -1;
		else if (arr1.get(0) == arr2.get(0)) {
			return arr1.get(2) <= arr2.get(2) ?  -1:1;
		}
		else return 1;
				
	}
}

public class Prim{
	public static void main(String[] args) throws IOException {
		BufferedReader scan = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		ArrayList<ArrayList<Integer>> array = new ArrayList<>();
		
		st = new StringTokenizer(scan.readLine());
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());
		
		for (int i=0; i<m; i++) {
			ArrayList<Integer> temp = new ArrayList<>();
			st = new StringTokenizer(scan.readLine());
			while (st.hasMoreTokens()) {
				temp.add(Integer.parseInt(st.nextToken()));
			}
			array.add(temp);
		}
		
		Collections.sort(array, new StartComparator());
//		
//		for (int i=0; i<m; i++) {
//			System.out.println(array.get(i));
//		}
//		System.out.println();
		
		ArrayList<Integer> groupOfNode = new ArrayList<>();
		groupOfNode.add(array.get(0).get(0));
		ArrayList<Integer> edgeCheck =new ArrayList<>();
		int mstValue=0;
		
		for (int i=0; i<n+1; i++) {
			edgeCheck.add(0);
		}
		
		while (edgeCheck.contains(0)) {
			
			int tempMin=0;
			int tempNodeStart = 0;
			int tempNodeEnd = 0;
			int tempIndex=-1;
			
			for (int x : groupOfNode) {
				int i=0;
				for (i=0; i<array.size(); i++) {
					if ((array.get(i).get(0) == x || array.get(i).get(1) == x)) 
						if (!groupOfNode.contains(array.get(i).get(1)) || !groupOfNode.contains(array.get(i).get(0))) {
							if ((array.get(i).get(2) < tempMin || tempMin==0)){
								tempMin = array.get(i).get(2);
								tempNodeStart = array.get(i).get(0);
								tempNodeEnd = array.get(i).get(1);
								tempIndex = i;
								
							}
						}
					}
				}
			
			
			if (tempIndex != -1) {
				
				mstValue += tempMin;
				System.out.println(tempNodeStart + " " + tempNodeEnd + " " + tempMin);
				if (!groupOfNode.contains(tempNodeStart)) {
					groupOfNode.add(tempNodeStart);
				}
				if (!groupOfNode.contains(tempNodeEnd)) {
					groupOfNode.add(tempNodeEnd);
				}
				

				
//				for (int i=0; i<array.size(); i++) {
//					
//					if (array.get(i).get(0) == tempStart && array.get(i).get(1) == tempEnd) {
//						//System.out.print("!");
//						//System.out.println(array.get(i));
//						array.remove(i);
//						if (i!=0) i--;
//					}
//				}
//				System.out.println("---------------------");
			}
			
			//System.out.println(groupOfNode);
		}
		
		System.out.println(mstValue);
	}
}